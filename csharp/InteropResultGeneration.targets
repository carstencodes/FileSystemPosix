<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <BuildDependsOn>GenerateInteropResults;$(BuildDependsOn)</BuildDependsOn>
    </PropertyGroup>

    <ItemDefinitionGroup>
        <InteropData>
            <Namespace>$(RootNamespace)</Namespace>
            <EnumName>Unknown</EnumName>
        </InteropData>
    </ItemDefinitionGroup>

    <PropertyGroup>
        <GeneratedInteropDataFile>$(IntermediateOutputPath)$(MSBuildProjectName).InteropResults.g$(DefaultLanguageSourceExtension)</GeneratedInteropDataFile>
    </PropertyGroup>

    <Target Name="GenerateInteropResults" Condition="@(InteropData->Count()) &gt; 0">
        <GenerateInteropContent InteropItems="@(InteropData)">
            <Output TaskParameter="Content" PropertyName="FileContent" />
        </GenerateInteropContent>
        <WriteLinesToFile
            File="$(GeneratedInteropDataFile)"
            Lines="$(FileContent)"
            Overwrite="true"
            Encoding="Unicode"/>
        <ItemGroup>
            <Compile Include="$(GeneratedInteropDataFile)" />
        </ItemGroup>
    </Target>
    <UsingTask TaskName="GenerateInteropContent"
        TaskFactory="RoslynCodeTaskFactory"
        AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <InteropItems ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
            <Content ParameterType="System.String" Output="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.Text" />
            <Using Namespace="System.Collections.Generic" />
            <Using Namespace="System.IO" />
            <Code Type="Fragment" Language="C#">
              <![CDATA[
              Dictionary<string, Dictionary<string, List<(string, string, string)>>> items = new Dictionary<string, Dictionary<string, List<(string, string, string)>>>();
              foreach (Microsoft.Build.Framework.ITaskItem item in InteropItems)
              {
                   string namespaceName = item.GetMetadata("Namespace");
                   string enumName = item.GetMetadata("EnumName");

                   if (string.IsNullOrWhiteSpace(namespaceName))
                   {
                       Log.LogError("Item {0} does not provide 'Namespace'", item.ItemSpec);
                       continue;
                   }

                   if (string.IsNullOrWhiteSpace(enumName))
                   {
                       Log.LogError("Item {0} does not provide 'EnumName'", item.ItemSpec);
                       continue;
                   }

                   if (!items.ContainsKey(namespaceName))
                   {
                       items.Add(namespaceName, new Dictionary<string, List<(string, string, string)>>());
                   }

                   Dictionary<string, List<(string, string, string)>> enums = items[namespaceName];
                   if (!enums.ContainsKey(enumName))
                   {
                       enums.Add(enumName, new List<(string, string, string)>());
                   }

                   List<(string, string, string)> targets = enums[enumName];

                   string fileName = Path.GetFileNameWithoutExtension(item.ItemSpec);
                   string extension = (Path.GetExtension(item.ItemSpec) ?? string.Empty).TrimStart('.');
                   string content = File.ReadAllText(item.ItemSpec);

                   targets.Add((fileName, extension, content));
              }

              StringBuilder buffer = new StringBuilder();

              foreach (var namespaceSpec in items)
              {
                  string namespaceName = namespaceSpec.Key;
                  var namespaceContent = namespaceSpec.Value;
                  buffer.AppendFormat("namespace {0}", namespaceName).AppendLine();
                  buffer.AppendLine("{");
                  foreach (var enumSpec in namespaceContent)
                  {
                      string enumName = enumSpec.Key;
                      var enumMembers = enumSpec.Value;
                      buffer.AppendFormat("    internal enum {0}", enumName).AppendLine();
                      buffer.AppendLine("    {");
                      foreach ((string value, string name, string comment) in enumMembers)
                      {
                          buffer.AppendLine("        /// <summary>");
                          buffer.AppendFormat("        /// {0}", comment).AppendLine();
                          buffer.AppendLine("        /// </summary>");
                          buffer.AppendFormat("        {0} = {1} ,", name, value).AppendLine().AppendLine();
                      }
                      buffer.AppendLine("    }");

                      buffer.AppendLine();
                      buffer.AppendLine("    /// <summary> Converter class for enumation values. </summary>");
                      buffer.AppendFormat("    internal static class {0}Values ", enumName).AppendLine();
                      buffer.AppendLine("    {");
                      buffer.AppendLine("          /// <summary> Convert ushort values to enum value. </summary>");
                      buffer.AppendFormat("        public static System.Collections.Generic.IReadOnlyDictionary<ushort, {0}> Values = ", enumName).AppendLine();
                      buffer.AppendFormat("            new System.Collections.ObjectModel.ReadOnlyDictionary<ushort, {0}>(new System.Collections.Generic.Dictionary<ushort, {0}>()", enumName).AppendLine();
                      buffer.AppendLine("                { ");
                      foreach ((string value, string name, string _) in enumMembers)
                      {
                          buffer.Append("                    { ").AppendFormat(" {0} , {2}.{1} ", value, name, enumName).AppendLine("} ,");
                      }
                      buffer.AppendLine("                } ");
                      buffer.AppendLine("            );").AppendLine();
                      buffer.AppendLine("          /// <summary> Convert enum values to textual representation. </summary>");
                      buffer.AppendFormat("        public static System.Collections.Generic.IReadOnlyDictionary<{0}, string> Texts = ", enumName).AppendLine();
                      buffer.AppendFormat("            new System.Collections.ObjectModel.ReadOnlyDictionary<{0}, string>(new System.Collections.Generic.Dictionary<{0}, string>()", enumName).AppendLine();
                      buffer.AppendLine("                { ");
                      foreach ((string value, string name, string comment) in enumMembers)
                      {
                          buffer.Append("                    { ").AppendFormat(" {2}.{1}, \"{0}\" ", comment, name, enumName).AppendLine("} ,");
                      }
                      buffer.AppendLine("                } ");
                      buffer.AppendLine("            );").AppendLine();
                      buffer.AppendLine("    }");
                  }
                  buffer.AppendLine("}");
                  buffer.AppendLine();
              }

              Content = buffer.ToString();
            ]]>
            </Code>
        </Task>
    </UsingTask>
</Project>